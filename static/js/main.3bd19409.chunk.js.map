{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isShown","show","questionObject","updateQuestion","getRandomInt","max","Math","floor","random","getNewQuestion","lp_number","common_json","behavioral_questions","length","LP","QArray","useEffect","className","Q","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2+IA6CeA,MAzCf,WACE,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAyCF,mBAAS,IAAlD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEIC,EAAe,SAACC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAGhCI,EAAiB,WACnB,IAAIC,EAAYN,EAAaO,EAAYC,qBAAqBC,QAG9D,MAAO,CAAC,GAFCF,EAAYC,qBAAqBF,GAAWI,GAEnC,EADVH,EAAYC,qBAAqBF,GAAWK,OAAOX,EAAaO,EAAYC,qBAAqBF,GAAWK,OAAOF,WAY7H,OARAG,qBAAU,WACRb,EAAeM,OAKd,IAGD,qBAAKQ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAWjB,EAAW,mBAAqB,oBAAhD,SACGE,EAAeY,KAElB,qBAAKG,UAAU,aAAf,SACGf,EAAegB,IAElB,sBAAKD,UAAU,qBAAf,UACE,wBAAQA,UAAU,eAAeE,QAASlB,EAA1C,uBACA,wBAAQgB,UAAU,YAAYE,QAAS,WAAOlB,GAAK,GAAQE,EAAeM,MAA1E,0BC1BKW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3bd19409.chunk.js","sourcesContent":["import './App.css';\r\nimport  common_json from './Amazon-Behavioral-Questions.json'\r\nimport { useEffect, useState } from 'react'\r\n\r\nfunction App() {\r\n  const [isShown, show] = useState(false)\r\n  const [questionObject, updateQuestion] = useState({})\r\n\r\n  var getRandomInt = (max) => {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n  var getNewQuestion = () => {\r\n    var lp_number = getRandomInt(common_json.behavioral_questions.length)\r\n    var lp = common_json.behavioral_questions[lp_number].LP\r\n    var q = common_json.behavioral_questions[lp_number].QArray[getRandomInt(common_json.behavioral_questions[lp_number].QArray.length)]\r\n    return {\"LP\": lp, \"Q\": q}\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateQuestion(getNewQuestion())\r\n  \r\n    // ES LINT ERROR, React Hook useEffect has a missing dependency: 'getNewQuestion'\r\n    // If I add the dependency, it will cause a stack overflow\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className={isShown  ? \"LPContainerShown\" : \"LPContainerHidden\"}>\r\n          {questionObject.LP}\r\n        </div>\r\n        <div className=\"QContainer\">\r\n          {questionObject.Q}\r\n        </div>\r\n        <div className=\"newButtonContainer\">\r\n          <button className=\"revealButton\" onClick={show}>Reveal LP</button>\r\n          <button className=\"newButton\" onClick={() => {show(false); updateQuestion(getNewQuestion())}}>New</button>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}